/****************************************************************************\ 
 *** 
 *** File                  : dssimengine_accesspoint_TCP.cpp
 *** 
 *** Generated by dSPACE Tools.
 *** (c) Copyright 2013, dSPACE GmbH. All rights reserved.
\****************************************************************************/

#if !defined(DSSIMENGINE_ACCESSPOINT_TCP_CPP_)
#  define    DSSIMENGINE_ACCESSPOINT_TCP_CPP_


/* -- Include directives. -- */
#  include "dssimengine_api.h"
#  include "IOCode_Data.h"
#  include "dssimengine_accesspoint_TCP.h"

#  if defined(EXTERN_C_DECL)
#    undef EXTERN_C_DECL
#  endif
#  if defined(__cplusplus)
#    define EXTERN_C_DECL extern "C"
#  else
#    define EXTERN_C_DECL extern
#  endif


/* -- Definitions of exported functions. -- */

  void
ApSimEngineOnInitIoPreRtosInit_ctlcBODY_3_TCP_i1_(
    DsTErrorList ErrorList, DsCApplication* pApp) 
{
pTCP_1_DriverHandle = DsCIoFuncEthernetChannel::create(ErrorList, pApp, DsNIoFuncEthernetChannel::TransportLayerProtocol::DS_TCP | DsNIoFuncEthernetChannel::SocketOptions::DS_TCP_NODELAY | DsNIoFuncEthernetChannel::SocketOptions::DS_NON_BLOCKING | DsNIoFuncEthernetChannel::SocketOptions::DS_REUSE_ADDR |  DsNIoFuncEthernetChannel::SocketOptions::DS_REUSE_PORT, false, 6816, GetEthernetHandleForEthernet_Setup_i1_());

}

  void
ApSimEngineOnInitIoPostRtosInit_ctlcBODY_0_TCP_i1_(
    DsTErrorList ErrorList) 
{
pTCP_1_DriverHandle->setName(ErrorList, "TCP (1)");
pTCP_1_DriverHandle->toInetAddr("160.91.113.184", 2333, &tCP_1_INetAddr);
// Set as client
pTCP_1_DriverHandle->setTcpRunMode(ErrorList, false);
pTCP_1_DriverHandle->setAutoReconnect(ErrorList, 1);
pTCP_1_DriverHandle->setTcpKeepAlive(ErrorList, false);

}

  void
ApSimEngineRunTimeInit_ctlcBODY_0_TCP_i1_(
    DsTErrorList ErrorList) 
{
tCP_1_ConnectionState = 0;
tCP_1_ConnectionRequest = 0;
tCP_1_NumOfSentBytes = 0;
tCP_1_Transmit_Status = 0;
tCP_1_Transmit_DataSize = 0;
std::memset(tCP_1_Transmit_DataVector, 0, 200 * (sizeof *tCP_1_Transmit_DataVector));
tCP_1_NumOfReceivedBytes = 0;
tCP_1_AvailableBytes = 0;
tCP_1_Receive_Status = 0;
tCP_1_Receive_DataSize = 0;
std::memset(tCP_1_Receive_DataVector, 0, 1024 * (sizeof *tCP_1_Receive_DataVector));
pTCP_1_ReceiveBuffer = (UInt8*) malloc(1000000);
tCP_1_ReceiveBufferSize = 1000000;
tCP_1_ConnectionRequestLastState = Undefined;

}

  void
ApSimEngineOnStartIo_ctlcBODY_0_TCP_i1_(
    DsTErrorList ErrorList) 
{
tCP_1_ConnectionState = 0;
tCP_1_ConnectionRequest = 0;
tCP_1_NumOfSentBytes = 0;
tCP_1_Transmit_Status = 0;
tCP_1_Transmit_DataSize = 0;
std::memset(tCP_1_Transmit_DataVector, 0, 200 * (sizeof *tCP_1_Transmit_DataVector));
tCP_1_NumOfReceivedBytes = 0;
tCP_1_AvailableBytes = 0;
tCP_1_Receive_Status = 0;
tCP_1_Receive_DataSize = 0;
std::memset(tCP_1_Receive_DataVector, 0, 1024 * (sizeof *tCP_1_Receive_DataVector));
tCP_1_ReceiveBufferFreeBytes = 1000000;
tCP_1_ReceiveFullBufferErrorFlag = false;

}

  void
ApSimEngineOnStopIo_ctlcBODY_0_TCP_i1_(
    DsTErrorList ErrorList) 
{
{

if (pTCP_1_DriverHandle->getConnectionState(ErrorList) != TCP_CONNECTION_DISCONNECTED)
{
pTCP_1_DriverHandle->retryNewRemote(ErrorList, NULL, Disconnect);
tCP_1_ConnectionState = TCP_CONNECTION_DISCONNECTED;
tCP_1_ConnectionRequestLastState = Undefined;
}
}

}

  void
ApSimEngineOnUnloadIo_ctlcBODY_0_TCP_i1_(
    DsTErrorList ErrorList) 
{
{

if (pTCP_1_DriverHandle->getConnectionState(ErrorList) != TCP_CONNECTION_DISCONNECTED)
{
pTCP_1_DriverHandle->retryNewRemote(ErrorList, NULL, Disconnect);
}
}

}

#endif                                 /* DSSIMENGINE_ACCESSPOINT_TCP_CPP_ */
/* [EOF] */
